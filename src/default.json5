{
	// ref: https://docs.renovatebot.com/configuration-options/
	$schema: "https://docs.renovatebot.com/renovate-schema.json",
	extends: [
		"config:best-practices",
		":pinVersions",
		// cspell:ignore automerge
		":automergeMinor",
		":automergeDigest",
		":prHourlyLimitNone",
		":prConcurrentLimitNone",
		"customManagers:biomeVersions",
	],
	ignorePresets: [":ignoreModulesAndTests"],
	bun: {
		ignorePaths: [
			// ignorePaths is not merged
			// ref: https://docs.renovatebot.com/configuration-options/#ignorepaths
			"**/node_modules/**",
			// ignore bun.lockb
			// an empty bun.lockb is required to Bun detected by Cloudflare Workers/Pages Builds
			"**/bun.lockb",
		],
	},
	labels: [
		"dependencies",
		"{{#unless (or (equals manager 'regex') (equals manager 'jsonata'))}}{{manager}}{{/unless}}",
	],
	// ref: https://docs.renovatebot.com/modules/manager/regex/#advanced-capture
	customManagers: [
		// renovate does not support tools not listed
		// ref: https://docs.renovatebot.com/modules/manager/mise/#additional-information
		{
			customType: "jsonata",
			description: "Updates mise tools (shorthands)",
			managerFilePatterns: [
				// ref: https://docs.renovatebot.com/modules/manager/mise/#file-matching
				"/(^|/)\\.?mise\\.toml$/",
				"/(^|/)\\.?mise/config\\.toml$/",
			],
			fileFormat: "toml",
			// to avoid renovate config validator error
			// Renovate throws "Missing datasource!" warnings but still works
			datasourceTemplate: "undefined",
			matchStrings: [
				'$each($.tools, function($v, $k) { $contains($k, ":") ? undefined : { "depName": $k, "currentValue": $v } })',
			],
		},
		// renovate does not support backends
		// ref: https://github.com/renovatebot/renovate/issues/30387
		{
			customType: "regex",
			description: "Updates mise tools (full)",
			managerFilePatterns: [
				// ref: https://docs.renovatebot.com/modules/manager/mise/#file-matching
				"/(^|/)\\.?mise\\.toml$/",
				"/(^|/)\\.?mise/config\\.toml$/",
			],
			// supports only cargo, npm, ubi, and aqua backends
			datasourceTemplate: "{{#if (equals datasource 'cargo')}}crate{{else}}\
{{#if (or (equals datasource 'ubi') (equals datasource 'aqua'))}}github-releases{{else}}{{datasource}}{{/if}}{{/if}}",
			currentValueTemplate: "{{{replace '^v(.+)$' '$1' currentValue}}}",
			extractVersionTemplate: "^v?(?<version>.+)",
			matchStrings: [
				// test: https://regex101.com/r/K6Imdx
				"['\"](?<datasource>.+?):(?<depName>.+?)['\"] *= *['\"][^\\d.]*(?<currentValue>.+?)['\"]",
			],
		},
		{
			customType: "jsonata",
			description: "Updates min_version in mise config",
			managerFilePatterns: [
				// ref: https://docs.renovatebot.com/modules/manager/mise/#file-matching
				"/(^|/)\\.?mise\\.toml$/",
				"/(^|/)\\.?mise/config\\.toml$/",
			],
			fileFormat: "toml",
			datasourceTemplate: "github-releases",
			depNameTemplate: "mise",
			packageNameTemplate: "jdx/mise",
			matchStrings: ['{ "currentValue": $.min_version }'],
		},
		{
			customType: "jsonata",
			description: "Updates mise versions in GitHub Actions",
			managerFilePatterns: [
				// ref: https://docs.renovatebot.com/modules/manager/github-actions/#file-matching
				// cspell:ignore gitea forgejo
				"/(^|/)(workflow-templates|\\.(?:github|gitea|forgejo)/(?:workflows|actions))/.+\\.ya?ml$/",
				"/(^|/)action\\.ya?ml$/",
			],
			fileFormat: "yaml",
			datasourceTemplate: "github-releases",
			depNameTemplate: "mise",
			packageNameTemplate: "jdx/mise",
			matchStrings: [
				'$.jobs.*.steps[$substringBefore(uses, "@") = "jdx/mise-action"].with.version.{ "currentValue": $ }',
			],
		},
		{
			customType: "jsonata",
			description: "Updates compatibility_date in wrangler.json",
			managerFilePatterns: ["/(^|/)wrangler\\.jsonc?$/"],
			fileFormat: "json",
			datasourceTemplate: "custom.wrangler-compatibility-date",
			depNameTemplate: "compatibility_date",
			versioningTemplate: "regex:^(?<minor>[0-9]{4})-(?<patch>[0-9]{2})-(?<build>[0-9]{2})$",
			matchStrings: ['{ "currentValue": compatibility_date }'],
		},
		{
			customType: "jsonata",
			description: "Updates compatibility_date in wrangler.toml",
			managerFilePatterns: ["/(^|/)wrangler\\.toml$/"],
			fileFormat: "toml",
			datasourceTemplate: "custom.wrangler-compatibility-date",
			depNameTemplate: "compatibility_date",
			versioningTemplate: "regex:^(?<minor>[0-9]{4})-(?<patch>[0-9]{2})-(?<build>[0-9]{2})$",
			matchStrings: ['{ "currentValue": compatibility_date }'],
		},
	],
	customDatasources: {
		// Renovate does not support transformation of datasource versions, so custom datasource is needed
		// ref: https://github.com/renovatebot/renovate/discussions/34671
		"wrangler-compatibility-date": {
			// cspell:ignore workerd
			// valid compatibility_date are the same as the dates in workerd versions
			// ref: https://github.com/cloudflare/workers-sdk/blob/2ef31a94596ad33c9f0adf9045a515fdb8e2cd38/packages/create-cloudflare/src/helpers/compatDate.ts#L24-L27
			// major version 0 is for beta releases, 1 is for stable releases
			// minor version is the date in YYYYMMDD format
			// patch version is the number of the release on that date
			defaultRegistryUrlTemplate: "https://registry.npmjs.org/workerd",
			transformTemplates: [
				// cspell:ignore millis
				'( \
						$latest := $lookup(versions, `dist-tags`.latest); \
						$transform_version_to_date := \
								/* exclude beta versions */ \
								$match(?, /^1\.([0-9]{4})([0-9]{2})([0-9]{2})\.[0-9]+$/) \
										~> $lookup(?, "groups") \
										~> $join(?, "-"); \
						{ \
								"tags": $each(`dist-tags`, function($version, $key) { \
										{ \
												$key: $transform_version_to_date($version) \
										} \
								}) ~> $merge(), \
								"homepage": $exists(homepage) ? homepage : $latest.homepage, \
								"sourceUrl": $exists(repository.url) ? repository.url : $latest.repository.url, \
								"releases": $each(versions, function($data, $version) { \
										{ \
												"version": $transform_version_to_date($version), \
												"gitRef": $data.gitHead, \
												"releaseTimestamp": $lookup(time, $version), \
												"sourceUrl": $data.repository.url != repository.url ? $data.repository.url \
										} \
								}) ~> $filter(function($data) { \
										$exists($data.version) \
								}) ~> $sort(function($left, $right) { \
										/* sort from latest to oldest */ \
										$toMillis($left.releaseTimestamp) < $toMillis($right.releaseTimestamp) \
								}) ~> $reduce(function($acc, $data) { \
										/* only keep the latest version for each date */ \
										$lookup($acc, $data.version) ? $acc : $merge([$acc, { $data.version: $data }]) \
								}, []) ~> $each(function($data) { $data }) \
									/* sort from oldest to latest */ \
									~> $reverse() \
						} \
				)',
			],
		},
	},
	packageRules: [
		// use unstable versions
		{
			// odd major versions are unstable but use the latest
			// ref: https://docs.renovatebot.com/modules/versioning/node/
			matchDepNames: ["node"],
			ignoreUnstable: false,
		},
		// automerge
		{
			matchDepNames: ["mise"],
			// cspell:ignore calver
			// mise uses Calver, so allow automerge for all versions
			// ref: https://mise.jdx.dev/roadmap.html#versioning
			automerge: true,
		},
		// set semantic commit types
		{
			matchCategories: ["ci"],
			semanticCommitType: "ci",
		},
		// add labels
		{
			matchFileNames: ["mise.toml"],
			addLabels: ["mise"],
		},
		// mise tools
		{
			matchManagers: ["custom.jsonata"],
			// cspell:ignore binstall
			matchDepNames: ["cargo-binstall"],
			overrideDatasource: "crate",
		},
		{
			matchManagers: ["custom.jsonata"],
			matchDepNames: ["taplo"],
			overrideDatasource: "github-releases",
			// cspell:ignore tamasfe
			overridePackageName: "tamasfe/taplo",
		},
		{
			matchManagers: ["custom.jsonata"],
			matchDepNames: ["biome"],
			overrideDatasource: "github-releases",
			overridePackageName: "biomejs/biome",
			extractVersion: "^cli/v(?<version>.+)",
		},
		{
			matchManagers: ["custom.jsonata"],
			matchDepNames: ["lychee"],
			overrideDatasource: "github-releases",
			// cspell:ignore lycheeverse
			overridePackageName: "lycheeverse/lychee",
			extractVersion: "^lychee-v(?<version>.+)",
		},
		{
			matchManagers: ["custom.jsonata"],
			matchDepNames: ["ghalint"],
			overrideDatasource: "github-releases",
			// cspell:ignore shunsuke
			overridePackageName: "suzuki-shunsuke/ghalint",
			extractVersion: "^v(?<version>.+)",
		},
		{
			matchManagers: ["custom.jsonata"],
			matchDepNames: ["pinact"],
			overrideDatasource: "github-releases",
			overridePackageName: "suzuki-shunsuke/pinact",
			extractVersion: "^v(?<version>.+)",
		},
	],
}
